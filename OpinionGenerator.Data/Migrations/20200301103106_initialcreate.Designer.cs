// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpinionGenerator.Data;

namespace OpinionGenerator.Data.Migrations
{
    [DbContext(typeof(OpinionGeneratorDbContext))]
    [Migration("20200301103106_initialcreate")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OpinionGenerator.Core.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RetrievedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SourceIntId")
                        .HasColumnType("int");

                    b.Property<int?>("TextAnalyticsResultId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlToImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SourceIntId");

                    b.HasIndex("TextAnalyticsResultId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.NewsSource", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntId");

                    b.HasIndex("Id", "Name");

                    b.ToTable("NewsSource");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.SentenceSentiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<int>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("SentimentScoresId")
                        .HasColumnType("int");

                    b.Property<int?>("TextAnalyticsResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentimentScoresId");

                    b.HasIndex("TextAnalyticsResultId");

                    b.ToTable("SentenceSentiment");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.SentimentScorePerLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Negative")
                        .HasColumnType("float");

                    b.Property<double>("Neutral")
                        .HasColumnType("float");

                    b.Property<double>("Positive")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SentimentScorePerLabel");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.TextAnalyticsResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("SentimentScoresId")
                        .HasColumnType("int");

                    b.Property<string>("TextAnalyzed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SentimentScoresId");

                    b.ToTable("AnalyticsResults");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.Article", b =>
                {
                    b.HasOne("OpinionGenerator.Core.Entities.NewsSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceIntId");

                    b.HasOne("OpinionGenerator.Core.Entities.TextAnalyticsResult", "TextAnalyticsResult")
                        .WithMany()
                        .HasForeignKey("TextAnalyticsResultId");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.SentenceSentiment", b =>
                {
                    b.HasOne("OpinionGenerator.Core.Entities.SentimentScorePerLabel", "SentimentScores")
                        .WithMany()
                        .HasForeignKey("SentimentScoresId");

                    b.HasOne("OpinionGenerator.Core.Entities.TextAnalyticsResult", null)
                        .WithMany("Sentences")
                        .HasForeignKey("TextAnalyticsResultId");
                });

            modelBuilder.Entity("OpinionGenerator.Core.Entities.TextAnalyticsResult", b =>
                {
                    b.HasOne("OpinionGenerator.Core.Entities.SentimentScorePerLabel", "SentimentScores")
                        .WithMany()
                        .HasForeignKey("SentimentScoresId");
                });
#pragma warning restore 612, 618
        }
    }
}
